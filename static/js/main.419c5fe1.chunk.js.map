{"version":3,"sources":["components/ListCity/ListCity.module.css","api/index.js","img/cloud.svg","img/sun.svg","img/partlyCloudy.svg","img/rain.svg","img/strom.svg","components/ListCity/ListCity.jsx","constTemp.js","components/Header/Header.jsx","config/index.js","helpers/index.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","axios","create","baseURL","responseType","ListCity","props","cities","cities1","useState","result","setResult","search","setSearch","useEffect","console","log","toggleCity","Form","className","styles","form","Control","type","value","onChange","e","target","ruCity","filter","city","country","filters","name","indexOf","prepareResult","i","length","push","ListGroup","map","item","Item","active","activeCity","onClick","setActiveCity","setToggleCity","defaultProps","METRIC","Header","cityData","href","setTypeTemp","weatherType","src","sunImg","alt","cloudImg","rainImg","stormImg","partlyCloudyImg","getImg","temp","predominantly","wind","pressure","humidity","setCityData","typeTemp","PropTypes","func","config","appid","parseQuery","params","clearData","Object","entries","forEach","key","undefined","join","buildQuery","App","directionName","precipitation","query","q","lang","units","api","get","then","res","data","Math","round","main","weather","speed","deg","clouds","description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.419c5fe1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ListCity_form__2nYMX\"};","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://api.openweathermap.org/data/2.5/\",\n  responseType: \"json\",\n});","export default __webpack_public_path__ + \"static/media/cloud.537bf324.svg\";","export default __webpack_public_path__ + \"static/media/sun.5f4a8e48.svg\";","export default __webpack_public_path__ + \"static/media/partlyCloudy.bd05e8ee.svg\";","export default __webpack_public_path__ + \"static/media/rain.0b103200.svg\";","export default __webpack_public_path__ + \"static/media/strom.8596a268.svg\";","import React, { Fragment, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types';\nimport { Form, ListGroup } from 'react-bootstrap';\nimport cities1 from '../../city.list.json';\nimport styles from './ListCity.module.css';\n\nconst ListCity = (props) => {\n\n  let cities = cities1;\n  const [result, setResult] = useState([]);\n  const [search, setSearch] = useState(\"\");\n\n  useEffect(() => {\n    console.log(search)\n  }, [search])\n\n  return (\n    <Fragment>\n      {\n        props.toggleCity ? \n        <Form className={styles.form}>\n        <Form.Control type=\"text\" value={search} onChange={(e) => {\n          setSearch(e.target.value);\n\n          if (e.target.value === \"\") {\n            setResult([]);\n            return;\n          }\n\n          let ruCity = cities.filter((city) => city.country === '');\n          console.log(ruCity);\n\n          let filters = ruCity.filter((city) => {\n            return city.name.indexOf(search) > -1;\n          });\n\n          let prepareResult = [];\n\n          for (let i = 0; i < filters.length; i++) {\n            if (i < 3) \n              prepareResult.push(filters[i]);\n            else \n              break;\n          }\n\n          setResult(prepareResult);\n          console.log('result: ', result);\n\n        }}></Form.Control>\n        <ListGroup>\n          {result.map((item, i) => {\n            return <ListGroup.Item key={i} active={props.activeCity === item.name ? true : false} onClick={() => {\n              props.setActiveCity(item.name);\n              props.setToggleCity(false);\n            }}>{item.name}</ListGroup.Item>\n          })}\n        </ListGroup>\n      </Form> : \"\"\n      }\n      \n    </Fragment>\n  )\n}\n\nListCity.propTypes = {\n  activeCity: PropTypes.string,\n  setActiveCity: PropTypes.func,\n  toggleCity: PropTypes.bool,\n  setToggleCity: PropTypes.func\n};\n\nListCity.defaultProps = {\n  activeCity: {},\n  setActiveCity: null,\n  toggleCity: false,\n  setToggleCity: null,\n}\n\nexport default ListCity;","export const METRIC = 'metric';\r\nexport const STANDARD = 'standard';","import React from 'react';\n// import \"../../../node_modules/bootstrap/scss/bootstrap\";\nimport PropTypes from 'prop-types';\nimport cloudImg from '../../img/cloud.svg';\nimport sunImg from '../../img/sun.svg';\nimport partlyCloudyImg from '../../img/partlyCloudy.svg';\nimport rainImg from '../../img/rain.svg';\nimport stormImg from '../../img/strom.svg';\nimport './Header.scss'\nimport ListCity from '../ListCity/ListCity';\nimport { METRIC, STANDARD } from '../../constTemp';\n\nconst Header = (props) => {\n\n    const getImg = () => {\n        switch (props.cityData.weatherType) {\n            case \"Clear\":\n                return (\n                    <img src={sunImg} alt=\"\"></img>\n                )\n            case \"Clouds\":\n                return (\n                    <img src={cloudImg} alt=\"\"></img>\n                )\n\n            case \"Rain\":\n                return (\n                    <img src={rainImg} alt=\"\"></img>\n                )\n            case \"Storm\":\n                return (\n                    <img src={stormImg} alt=\"\"></img>\n                )\n            case \"Partly cloudy\":\n                return (\n                    <img src={partlyCloudyImg} alt=\"\"></img>                   \n                )\n            default:\n                break;\n        }\n    }\n    return (\n        <div className=\"header__background\">\n            <div className=\"container\">\n                <div className=\"header__conteiner\">\n                    <div className=\"header__city\" >\n\n                        { !props.toggleCity ? <div className=\"header__city-name\">{props.cityData.city}</div> : \"\"}\n\n                        <div className=\"header__c-f\" >\n                            <a href=\"#\" className=\"header__c\" onClick={() => props.setTypeTemp(METRIC)}> C </a>\n                            <a href=\"#\" className=\"header__f\" onClick={() => props.setTypeTemp(STANDARD)}> F</a>\n                        </div>\n                    </div>\n                    <div className=\"header__change\">\n                        <ListCity \n                            toggleCity={props.toggleCity} \n                            setToggleCity={props.setToggleCity} \n                            activeCity={props.activeCity} \n                            setActiveCity={props.setActiveCity}\n                        />\n                        { !props.toggleCity ? \n                            <>\n                                <div className=\"change__city\" onClick={() => {props.setToggleCity(!props.toggleCity)}}>Сменить город </div>\n                                {/* <div className=\"header__locate\">\n                                    <div className=\"locate__img\">\n                                        <img src=\"img/location.svg\" />\n                                    </div>\n                                    <div className=\"locate\">Мое местоположение</div> \n                                </div>  */}\n                            </>\n                            : \"\" }\n                    </div>\n                    <div className=\"header__temperature\">\n                        <div className=\"header__img\">\n                            {getImg()}\n                        </div>\n                        <div className=\"temperature\">\n                            {props.cityData.temp}&deg;\n                        </div>\n                    </div>\n                    <div className=\"predominantly\">\n                        {props.cityData.predominantly}\n                    </div>\n                    <div className=\"features\">\n                        <div className=\"wind\">\n                            <div className=\"wind__header\"> Ветер </div>\n                            <div className=\"wind__info\">{props.cityData.wind}м/с </div> \n                        </div>\n                        {/* ,{props.directionName} */}\n                        <div className=\"pressure\">\n                            <div className=\"pressure__header\"> Давление </div>\n                            <div className=\"pressure__info\">{props.cityData.pressure}мм рт. ст.</div>\n                        </div>\n                        \n                        <div className=\"humidity\">\n                            <div className=\"humidity__header\"> Влажность </div>\n                            <div className=\"humidity__info\">{props.cityData.humidity}%</div>\n                        </div>\n                        {/* <div className=\"precipitation\">\n                            <div className=\"precipitation__header\"> Вероятность дождя</div>\n                            <div className=\"precipitation__info\">{props.precipitation}%</div>\n                        </div> */}\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nHeader.propTypes = {\n    cityData: PropTypes.object,\n    setCityData: PropTypes.func,\n    toggleCity: PropTypes.bool,\n    setToggleCity: PropTypes.func,\n    activeCity: PropTypes.string,\n    setActiveCity: PropTypes.func,\n    typeTemp: PropTypes.string,\n    setTypeTemp: PropTypes.func\n};\n\nHeader.defaultProps = {\n    cityData: {},\n    setCityData: null,\n    toggleCity: false,\n    setToggleCity: null,\n    activeCity: \"\",\n    setActiveCity: null,\n    typeTemp: METRIC,\n    setTypeTemp: PropTypes.func\n}\n\nexport default Header;","const config = {\n    appid: 'ac8c195b8eaeee4efcfa4f3a9422bc2c',\n};\n\nexport default config;","export const buildQuery = (params) => {\n    return Object.entries(params)\n      .map((item) => item.join(\"=\"))\n      .join(\"&\");\n};\n\nexport const parseQuery = (params) => {\n    let clearData = {};\n\n    Object.entries(params).forEach(([key, value]) => {\n        if (value === undefined || value === null) return;\n\n        clearData[key] = value;\n    });\n\n    return buildQuery({\n        ...clearData,\n    });\n};","import React, { useEffect, useState } from 'react';\n// import '../node_modules/bootstrap';\nimport api from './api';\nimport './App.css'; \nimport Header from './components/Header/Header';\nimport config from './config';\nimport { parseQuery } from './helpers';\nimport { Fragment } from 'react';\nimport { METRIC } from './constTemp';\n\nfunction App() {\n\n  const [cityData, setCityData] = useState({\n    city: null,\n    temp: null,\n    weatherType: null,\n    wind: null,\n    directionName: null,\n    pressure: null,\n    humidity: null,\n    precipitation: null,\n    predominantly: null\n  });\n\n  const [toggleCity, setToggleCity] = useState(false);\n  const [typeTemp, setTypeTemp] = useState(METRIC);\n\n  /*const [city, setCity] = useState(null);\n  const [temp, setTemp] = useState(null);\n  const [weatherType, setWeatherType] = useState(null);\n\n  const [wind, setWind] = useState(null);\n  const [directionName, setDirectionName] = useState(null);\n  const [pressure, setPressure] = useState(null);\n  const [humidity, setHumidity] = useState(null);\n  const [precipitation, setPrecipitation] = useState(null);\n  const [predominantly, setPredominantly] = useState(null);*/\n\n  const [activeCity, setActiveCity] = useState(\"Magnitogorsk\");\n  \n  useEffect(() => {\n      const query =\n        \"/weather?\" +\n        parseQuery({\n          q: activeCity,\n          lang: \"ru\",\n          units: typeTemp,\n          appid: config.appid\n        });\n  \n      console.log(\"query: \", query);\n  \n      api.get(query).then((res) => {\n        console.log(res);\n\n        setCityData({\n          ...cityData,\n          city: res.data.name,\n          temp: Math.round(res.data.main.temp),\n          weatherType: res.data.weather[0].main,\n          wind: res.data.wind.speed,\n          directionName: res.data.wind.deg,\n          pressure: res.data.main.pressure,\n          humidity: res.data.main.humidity,\n          precipitation: res.data.clouds.precipitation,\n          predominantly: res.data.weather[0].description\n        });\n      });\n  }, [activeCity, typeTemp])\n\n  return (\n    <Fragment>\n      <Header \n        cityData={cityData}\n        setCityData={setCityData}\n        toggleCity={toggleCity} \n        setToggleCity={setToggleCity}\n        activeCity={activeCity}\n        setActiveCity={setActiveCity}\n        typeTemp={typeTemp}\n        setTypeTemp={setTypeTemp}\n      />\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}